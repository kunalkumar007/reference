"use strict";(self.webpackChunkreference=self.webpackChunkreference||[]).push([[3212],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=p(n),m=a,d=h["".concat(s,".").concat(m)]||h[m]||c[m]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2566:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return h}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={},s=void 0,p={unversionedId:"Python Course/Python Operators",id:"Python Course/Python Operators",isDocsHomePage:!1,title:"Python Operators",description:"008. Python Operators",source:"@site/docs/Python Course/008. Python Operators.md",sourceDirName:"Python Course",slug:"/Python Course/Python Operators",permalink:"/reference/docs/Python Course/Python Operators",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/Python Course/008. Python Operators.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Dictionary Append",permalink:"/reference/docs/Python Course/Python Dictionary Append"},next:{title:"Python Arrays",permalink:"/reference/docs/Python Course/Python Arrays"}},u=[{value:"What are Logical Operators in Python?",id:"what-are-logical-operators-in-python",children:[]},{value:"Arithmetic Operators",id:"arithmetic-operators",children:[]},{value:"Comparison Operators",id:"comparison-operators",children:[]},{value:"Python Assignment Operators",id:"python-assignment-operators",children:[{value:"Example of compound assignment operator",id:"example-of-compound-assignment-operator",children:[]}]},{value:"Logical Operators",id:"logical-operators",children:[]},{value:"Membership Operators",id:"membership-operators",children:[]},{value:"Identity Operators",id:"identity-operators",children:[{value:"Example:",id:"example",children:[]}]},{value:"Operator precedence",id:"operator-precedence",children:[{value:"Python 2 Example",id:"python-2-example",children:[]},{value:"Summary:",id:"summary",children:[]}]}],c={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},"Python Operators")),(0,o.kt)("h2",{id:"what-are-logical-operators-in-python"},"What are Logical Operators in Python?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Logical Operators in Python")," are used to perform logical operations on the values of variables. The value is either true or false. We can figure out the conditions by the result of the truth values. There are mainly three types of logical operators in python : logical AND, logical OR and logical NOT. Operators are represented by keywords or special characters."),(0,o.kt)("h2",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,o.kt)("p",null,"Arithmetic Operators perform various arithmetic calculations like addition, subtraction, multiplication, division, %modulus, exponent, etc. There are various methods for arithmetic calculation in Python like you can use the eval function, declare variable & calculate, or call functions."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")," For arithmetic operators we will take simple example of addition where we will add two-digit 4+5=9"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"x= 4    \ny= 5\nprint(x + y)\n")),(0,o.kt)("p",null,"Similarly, you can use other arithmetic operators like for multiplication(*), division (/), substraction (-), etc."),(0,o.kt)("h2",{id:"comparison-operators"},"Comparison Operators"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Comparison Operators In Python")," compares the values on either side of the operand and determines the relation between them. It is also referred to as relational operators. Various comparison operators in python are ( ==, != , \u02c2\u02c3, >,<=, etc.)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")," For comparison operators we will compare the value of x to the value of y and print the result in true or false. Here in example, our value of x = 4 which is smaller than y = 5, so when we print the value as x>y, it actually compares the value of x to y and since it is not correct, it returns false."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"x = 4\ny = 5\nprint(('x > y  is',x>y))\n")),(0,o.kt)("p",null,"Likewise, you can try other comparison operators (x < y, x==y, x!=y, etc.)"),(0,o.kt)("h2",{id:"python-assignment-operators"},"Python Assignment Operators"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Assignment Operators")," in ",(0,o.kt)("strong",{parentName:"p"},"Python")," are used for assigning the value of the right operand to the left operand. Various assignment operators used in Python are (+=, - = , *=, /= , etc.)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")," Python assignment operators is simply to assign the value, for example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'num1 = 4\nnum2 = 5\nprint(("Line 1 - Value of num1 : ", num1))\nprint(("Line 2 - Value of num2 : ", num2))\n')),(0,o.kt)("h3",{id:"example-of-compound-assignment-operator"},"Example of compound assignment operator"),(0,o.kt)("p",null,"We can also use a compound assignment operator, where you can add, subtract, multiply right operand to left and assign addition (or any other arithmetic function) to the left operand."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Step 1: Assign value to num1 and num2"),(0,o.kt)("li",{parentName:"ul"},"Step 2: Add value of num1 and num2 (4+5=9)"),(0,o.kt)("li",{parentName:"ul"},"Step 3: To this result add num1 to the output of Step 2 ( 9+4)"),(0,o.kt)("li",{parentName:"ul"},"Step 4: It will print the final result as 13")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'num1 = 4\nnum2 = 5\nres = num1 + num2\nres += num1\nprint(("Line 1 - Result of + is ", res))\n')),(0,o.kt)("h2",{id:"logical-operators"},"Logical Operators"),(0,o.kt)("p",null,"Logical operators in Python are used for conditional statements are true or false. Logical operators in Python are AND, OR and NOT. For logical operators following condition are applied."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For AND operator \u2013 It returns TRUE if both the operands (right side and left side) are true"),(0,o.kt)("li",{parentName:"ul"},"For OR operator- It returns TRUE if either of the operand (right side or left side) is true"),(0,o.kt)("li",{parentName:"ul"},"For NOT operator- returns TRUE if operand is false\n",(0,o.kt)("strong",{parentName:"li"},"Example:")," Here in example we get true or false based on the value of a and b")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"a = True\nb = False\nprint(('a and b is',a and b))\nprint(('a or b is',a or b))\nprint(('not a is',not a))\n")),(0,o.kt)("h2",{id:"membership-operators"},"Membership Operators"),(0,o.kt)("p",null,"These operators test for membership in a sequence such as lists, strings or tuples. There are two membership operators that are used in Python. (in, not in). It gives the result based on the variable present in specified sequence or string"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")," For example here we check whether the value of x=4 and value of y=8 is available in list or not, by using in and not in operators."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'x = 4\ny = 8\nlist = [1, 2, 3, 4, 5 ];\nif ( x in list ):\n   print("Line 1 - x is available in the given list")\nelse:\n   print("Line 1 - x is not available in the given list")\nif ( y not in list ):\n   print("Line 2 - y is not available in the given list")\nelse:\n   print("Line 2 - y is available in the given list")\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Declare the value for x and y"),(0,o.kt)("li",{parentName:"ul"},"Declare the value of list"),(0,o.kt)("li",{parentName:"ul"},'Use the "in" operator in code with if statement to check the value of x existing in the list and print the result accordingly'),(0,o.kt)("li",{parentName:"ul"},'Use the "not in" operator in code with if statement to check the value of y exist in the list and print the result accordingly'),(0,o.kt)("li",{parentName:"ul"},"Run the code- When the code run it gives the desired output")),(0,o.kt)("h2",{id:"identity-operators"},"Identity Operators"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Identity Operators")," in ",(0,o.kt)("strong",{parentName:"p"},"Python")," are used to compare the memory location of two objects. The two identity operators used in Python are (is, is not)."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Operator is: It returns true if two variables point the same object and false otherwise"),(0,o.kt)("li",{parentName:"ul"},"Operator is not: It returns false if two variables point the same object and true otherwise\nFollowing operands are in decreasing order of precedence.")),(0,o.kt)("p",null,"Operators in the same box evaluate left to right"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"Operators(Decreasing order of precedence)   Meaning\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"**                      Exponent\n*, /, //, %                 Multiplication, Division, Floor division, Modulus\n+, -                        Addition, Subtraction\n<= < > >=                   Comparison operators\n= %= /= //= -= += *= **=            Assignment Operators\nis is not                   Identity operators\nin not in                   Membership operators\nnot or and                  Logical operators\n")),(0,o.kt)("h3",{id:"example"},"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'x = 20\ny = 20\nif ( x is y ): \n    print("x & y  SAME identity")\ny=30\nif ( x is not y ):\n    print("x & y have DIFFERENT identity")\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Declare the value for variable x and y"),(0,o.kt)("li",{parentName:"ul"},'Use the operator "is" in code to check if value of x is same as y'),(0,o.kt)("li",{parentName:"ul"},'Next we use the operator "is not" in code if value of x is not same as y'),(0,o.kt)("li",{parentName:"ul"},"Run the code- The output of the result is as expected")),(0,o.kt)("h2",{id:"operator-precedence"},"Operator precedence"),(0,o.kt)("p",null,"The operator precedence determines which operators need to be evaluated first. To avoid ambiguity in values, precedence operators are necessary. Just like in normal multiplication method, multiplication has a higher precedence than addition. For example in 3+ 4",(0,o.kt)("em",{parentName:"p"},"5, the answer is 23, to change the order of precedence we use a parentheses (3+4)"),"5, now the answer is 35. Precedence operator used in Python are (unary + - ~, *",(0,o.kt)("em",{parentName:"p"},", ")," / %, + - , &) etc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'v = 4\nw = 5\nx = 8\ny = 2\nz = 0\nz = (v+w) * x / y;   \nprint("Value of (v+w) * x/ y is ",  z)\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Declare the value of variable v,w\u2026z"),(0,o.kt)("li",{parentName:"ul"},"Now apply the formula and run the code"),(0,o.kt)("li",{parentName:"ul"},"The code will execute and calculate the variable with higher precedence and will give the output")),(0,o.kt)("h3",{id:"python-2-example"},"Python 2 Example"),(0,o.kt)("p",null,"Above examples are Python 3 codes, if you want to use Python 2, please consider following codes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'#Arithmetic Operators\nx= 4    \ny= 5\nprint x + y\n\n#Comparison Operators\nx = 4\ny = 5\nprint(\'x > y  is\',x>y)\n\n#Assignment Operators\nnum1 = 4\nnum2 = 5\nprint ("Line 1 - Value of num1 : ", num1)\nprint ("Line 2 - Value of num2 : ", num2)\n\n#compound assignment operator\nnum1 = 4\nnum2 = 5\nres = num1 + num2\nres += num1\nprint ("Line 1 - Result of + is ", res)\n\n#Logical Operators\na = True\nb = False\nprint(\'a and b is\',a and b)\nprint(\'a or b is\',a or b)\nprint(\'not a is\',not a)\n\n#Membership Operators\nx = 4\ny = 8\nlist = [1, 2, 3, 4, 5 ];\nif ( x in list ):\n   print "Line 1 - x is available in the given list"\nelse:\n   print "Line 1 - x is not available in the given list"\nif ( y not in list ):\n   print "Line 2 - y is not available in the given list"\nelse:\n   print "Line 2 - y is available in the given list"\n\n#Identity Operators\nx = 20\ny = 20\nif ( x is y ):\n    print "x & y  SAME identity"\ny=30\nif ( x is not y ):\n    print "x & y have DIFFERENT identity"\n\n#Operator precedence\nv = 4\nw = 5\nx = 8\ny = 2\nz = 0\nz = (v+w) * x / y;   \nprint "Value of (v+w) * x/ y is ",  z\n')),(0,o.kt)("h3",{id:"summary"},"Summary:"),(0,o.kt)("p",null,"Operators in a programming language are used to perform various operations on values and variables. In Python, you can use operators like"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"There are various methods for arithmetic calculation in Python as you can use the eval function, declare variable & calculate, or call functions"),(0,o.kt)("li",{parentName:"ul"},"Comparison operators often referred as relational operators are used to compare the values on either side of them and determine the relation between them"),(0,o.kt)("li",{parentName:"ul"},"Python assignment operators are simply to assign the value to variable"),(0,o.kt)("li",{parentName:"ul"},"Python also allows you to use a compound assignment operator, in a complicated arithmetic calculation, where you can assign the result of one operand to the other"),(0,o.kt)("li",{parentName:"ul"},"For AND operator \u2013 It returns TRUE if both the operands (right side and left side) are true"),(0,o.kt)("li",{parentName:"ul"},"For OR operator- It returns TRUE if either of the operand (right side or left side) is true"),(0,o.kt)("li",{parentName:"ul"},"For NOT operator- returns TRUE if operand is false"),(0,o.kt)("li",{parentName:"ul"},"There are two membership operators that are used in Python. (in, not in)."),(0,o.kt)("li",{parentName:"ul"},"It gives the result based on the variable present in specified sequence or string"),(0,o.kt)("li",{parentName:"ul"},"The two identify operators used in Python are (is, is not)"),(0,o.kt)("li",{parentName:"ul"},"It returns true if two variables point the same object and false otherwise"),(0,o.kt)("li",{parentName:"ul"},"Precedence operator can be useful when you have to set priority for which calculation need to be done first in a complex calculation.")))}h.isMDXComponent=!0}}]);