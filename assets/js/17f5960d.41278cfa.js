"use strict";(self.webpackChunkreference=self.webpackChunkreference||[]).push([[3075],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=u(n),m=r,c=h["".concat(o,".").concat(m)]||h[m]||g[m]||l;return n?a.createElement(c,i(i({ref:t},p),{},{components:n})):a.createElement(c,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5998:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return p},default:function(){return h}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],s={},o=void 0,u={unversionedId:"Python Course/Python Average",id:"Python Course/Python Average",isDocsHomePage:!1,title:"Python Average",description:"042. Python Average",source:"@site/docs/Python Course/042. Python Average.md",sourceDirName:"Python Course",slug:"/Python Course/Python Average",permalink:"/reference/docs/Python Course/Python Average",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/Python Course/042. Python Average.md",tags:[],version:"current",sidebarPosition:42,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python List",permalink:"/reference/docs/Python Course/Python List"},next:{title:"Python List count()",permalink:"/reference/docs/Python Course/Python List count()"}},p=[{value:"Syntax",id:"syntax",children:[]},{value:"Parameters",id:"parameters",children:[{value:"Return value:",id:"return-value",children:[]}]},{value:"Python range() Function and history",id:"python-range-function-and-history",children:[]},{value:"Using range()",id:"using-range",children:[]},{value:"Using start and stop in range()",id:"using-start-and-stop-in-range",children:[]},{value:"Using start, stop and step",id:"using-start-stop-and-step",children:[]},{value:"Incrementing the values in range using a positive step.",id:"incrementing-the-values-in-range-using-a-positive-step",children:[]},{value:"Reverse Range: Decrementing the values using negative step.",id:"reverse-range-decrementing-the-values-using-negative-step",children:[]},{value:"Using floating numbers in Python range()",id:"using-floating-numbers-in-python-range",children:[]},{value:"Using for-loop with Python range()",id:"using-for-loop-with-python-range",children:[]},{value:"Using Python range() as a list",id:"using-python-range-as-a-list",children:[]},{value:"Using characters in python range()",id:"using-characters-in-python-range",children:[]},{value:"How to Access Range Elements",id:"how-to-access-range-elements",children:[{value:"Using for-loop",id:"using-for-loop",children:[]},{value:"Using index",id:"using-index",children:[]},{value:"Using list()",id:"using-list",children:[]}]},{value:"Example: Get even numbers using range()",id:"example-get-even-numbers-using-range",children:[]},{value:"Merging two-range() outputs",id:"merging-two-range-outputs",children:[]},{value:"Using range() With NumPy",id:"using-range-with-numpy",children:[]},{value:"Floating point numbers using NumPy arange()",id:"floating-point-numbers-using-numpy-arange",children:[]},{value:"Summary:",id:"summary",children:[]}],g={toc:p};function h(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("ol",{start:42},(0,l.kt)("li",{parentName:"ol"},"Python Average")),(0,l.kt)("h1",{id:"what-is-python-range"},"What is Python Range?"),(0,l.kt)("p",null,"Python range() is a built-in function available with Python from Python(3.x), and it gives a sequence of numbers based on the start and stop index given. In case the start index is not given, the index is considered as 0, and it will increment the value by 1 till the stop index."),(0,l.kt)("p",null,"For example range(5) will output you values 0,1,2,3,4 .The Python range()is a very useful command and mostly used when you have to iterate using for loop."),(0,l.kt)("h2",{id:"syntax"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"range(start, stop, step)\n")),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"start:")," (optional) The start index is an integer, and if not given, the default value is 0."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"stop:")," The stop index decides the value at which the range function has to stop. It is a mandatory input to range function. The last value will be always 1 less than the stop value."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"step:")," (optional).The step value is the number by which the next number is range has to be incremented, by default, it is 1.")),(0,l.kt)("h3",{id:"return-value"},"Return value:"),(0,l.kt)("p",null,"The return value is a sequence of numbers from the given start to stop index."),(0,l.kt)("h2",{id:"python-range-function-and-history"},"Python range() Function and history"),(0,l.kt)("p",null,"Python range() has been introduced from python version 3, before that xrange() was the function."),(0,l.kt)("p",null,"Both range and xrange() are used to produce a sequence of numbers."),(0,l.kt)("p",null,"Following are the difference between range and xrange():"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"range()"),(0,l.kt)("th",{parentName:"tr",align:null},"xrange()"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"The range() gives the sequence of numbers and returns a list of numbers."),(0,l.kt)("td",{parentName:"tr",align:null},"The xrange() function gives a generator object that needs to be looped in a for-loop to get the values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"The range() returns a list."),(0,l.kt)("td",{parentName:"tr",align:null},"xrange() returns a generator object.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"The range() method uses more memory as the list returned has to be stored in comparison to xrange()."),(0,l.kt)("td",{parentName:"tr",align:null},"As xrange() returns a generator object, it does not give values instantly and has to be used inside for-loop to get the values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"The usage of memory is more hence the code execution is slow when working on a huge set of data."),(0,l.kt)("td",{parentName:"tr",align:null},"The code execution is faster using xrange().")))),(0,l.kt)("h2",{id:"using-range"},"Using range()"),(0,l.kt)("p",null,"This example shows how to print the values from 0-9 using range()."),(0,l.kt)("p",null,"The value used in range is 10, so the output is 0 1 2 3 4 5 6 7 8 9"),(0,l.kt)("p",null,"Since the start is not given the start is considered as 0 and the last value is given till 9. The last value is always 1 less than the given value i.e. stop-1."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'for i in range(10):\n    print(i, end =" ")\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"0 1 2 3 4 5 6 7 8 9\n")),(0,l.kt)("h2",{id:"using-start-and-stop-in-range"},"Using start and stop in range()"),(0,l.kt)("p",null,"In the code, the start value is 3, and stop value is 10. Here the start index is 3, so the sequence of numbers will start from 3 till the stop value. The last value in the sequence will be 1 less than the stop value 10-1 = 9."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'for i in range(3, 10):\n    print(i, end =" ")\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"3 4 5 6 7 8 9\n")),(0,l.kt)("h2",{id:"using-start-stop-and-step"},"Using start, stop and step"),(0,l.kt)("p",null,"The start value is 3, so the sequence of numbers will start at 3. The stop value is 10, so the sequence of numbers will stop at (10-1) i.e 9. The step is 2, so each value in the sequence will be incremented by 2. If the step value is not given, the value for step defaults to 1."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'for i in range(3, 10, 2):\n    print(i, end =" ")\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"3 5 7 9\n")),(0,l.kt)("p",null,"So far, we have seen how range() function gives the incremented value for the stop value given. Let us now try an example to get the decremented value in the range given."),(0,l.kt)("h2",{id:"incrementing-the-values-in-range-using-a-positive-step"},"Incrementing the values in range using a positive step."),(0,l.kt)("p",null,"The parameter step in range() can be used to increment /decrement the values. By default, it is a positive value 1. So it will always give incremented values."),(0,l.kt)("p",null,"The step value has to be positive incase you want to want incremented values as ouput."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'for i in range(1, 30, 5):\n    print(i, end =" ")\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"1 6 11 16 21 26\n")),(0,l.kt)("h2",{id:"reverse-range-decrementing-the-values-using-negative-step"},"Reverse Range: Decrementing the values using negative step."),(0,l.kt)("p",null,"The parameter step with negative value in range() can be used to get decremented values. In the example below the step value is negative so the output will be in decremented from the range value given."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'for i in range(15, 5, -1):\n    print(i, end =" ")\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"15 14 13 12 11 10 9 8 7 6\n")),(0,l.kt)("p",null,"The start value is 15, the stop value is 5 and the step value is negative number i.e -1. With above inputs range() function will decrement the value from 15 onwards till it reaches the stop value , but here the difference is the last value will be stop + 1."),(0,l.kt)("h2",{id:"using-floating-numbers-in-python-range"},"Using floating numbers in Python range()"),(0,l.kt)("p",null,"Let us now work on the range() using floating-point numbers."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'for i in range(10.5):\n    print(i, end =" ")\n')),(0,l.kt)("p",null,"In above example we have used stop value as 10.5."),(0,l.kt)("p",null,"The output is :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Traceback (most recent call last):\n  File \"python_range.py\", line 1, in <module>\n    for i in range(10.5):\nTypeError: 'float' object cannot be interpreted as an integer\n")),(0,l.kt)("p",null,"Python gives an error as the range() function does not support floating-point numbers for start, stop and step."),(0,l.kt)("h2",{id:"using-for-loop-with-python-range"},"Using for-loop with Python range()"),(0,l.kt)("p",null,"In this example we will use a array of numbers and, let us see how to use the iterate the array inside for-loop using range()"),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"arr_list = ['Mysql', 'Mongodb', 'PostgreSQL', 'Firebase']\n\nfor i in range(len(arr_list)):\n    print(arr_list[i], end =\" \")\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"MysqlMongodb PostgreSQL Firebase\n")),(0,l.kt)("p",null,"In above example we have used len(arr_list) as the stop value. The for loop will iterate till the stop value i.e the length of the array and that will be 4, as we have four items in the arr_list. The start value will be 0 and step will be 1.So the values will start from 0 and will stop at 3 i.e length of array -1 meaning 4 -1 = 3."),(0,l.kt)("h2",{id:"using-python-range-as-a-list"},"Using Python range() as a list"),(0,l.kt)("p",null,"In this example will see how to make use of the output from range as a list."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"print(list(range(10)))\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n")),(0,l.kt)("p",null,"You can see the output is a list format. It was not necessary to loop the range() and using list() method we could directly convert the output from range to list format."),(0,l.kt)("h2",{id:"using-characters-in-python-range"},"Using characters in python range()"),(0,l.kt)("p",null,"So far, we have used integers in python range(). We have also seen that floating-point numbers are not supported in python range. Let us try and see the output as to what happens when we use characters."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for c in range ('z'):\n        print(c, end =\" \")\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Traceback (most recent call last):\n  File \"python_range.py\", line 1, in <module>\n    for c in range ('z'):\nTypeError: 'str' object cannot be interpreted as an integer\n")),(0,l.kt)("p",null,"It throws an error saying a string cannot be interpreted as an integer."),(0,l.kt)("p",null,"To get the list of the alphabets you can customize the code and get the desired outputas shown below:"),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def get_alphabets(startletter, stopletter, step):\n    for c in range(ord(startletter.lower()), ord(stopletter.lower()), step):\n        yield chr(c)\n\nprint(list(get_alphabets("a", "h", 1)))\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"['a', 'b', 'c', 'd', 'e', 'f', 'g']\n")),(0,l.kt)("h2",{id:"how-to-access-range-elements"},"How to Access Range Elements"),(0,l.kt)("p",null,"You can make use of a for-loop to get the values from the range or use the index to access the elements from range()."),(0,l.kt)("h3",{id:"using-for-loop"},"Using for-loop"),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for i in range(6):\n    print(i)\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"0\n1\n2\n3\n4\n5\n")),(0,l.kt)("h3",{id:"using-index"},"Using index"),(0,l.kt)("p",null,"The index is used with range to get the value available at that position. If the range value is 5, to get the startvalue, you can use range(5)","[0]"," and the next value range(5)","[1]"," and so on."),(0,l.kt)("h4",{id:"example"},"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'startvalue = range(5)[0] \nprint("The first element in range is = ", startvalue) \n\nsecondvalue = range(5)[1] \nprint("The second element in range is = ", secondvalue) \n\nlastvalue = range(5)[-1]\nprint("The first element in range is = ", lastvalue)\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'startvalue = range(5)[0] \nprint("The first element in range is = ", startvalue) \n\nsecondvalue = range(5)[1] \nprint("The second element in range is = ", secondvalue) \n\nlastvalue = range(5)[-1]\nprint("The first element in range is = ", lastvalue)\n')),(0,l.kt)("h3",{id:"using-list"},"Using list()"),(0,l.kt)("p",null,"This method will print all the elements from the range(). Using list() it will return the elements from range() in list format."),(0,l.kt)("h4",{id:"example-1"},"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"print(list(range(10)))\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"}," [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n")),(0,l.kt)("p",null,"It gives the list output for the range given."),(0,l.kt)("h2",{id:"example-get-even-numbers-using-range"},"Example: Get even numbers using range()"),(0,l.kt)("p",null,"Using range() will get the list of even numbers in the range given as input. The parameters for range() are, start is 2, stop is 20, and step is 2, so the values will be incremented by 2 and will give even numbers till stop-2."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'for i in range(2, 20, 2):\n    print(i, end =" ")\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"2 4 6 8 10 12 14 16 18\n")),(0,l.kt)("h2",{id:"merging-two-range-outputs"},"Merging two-range() outputs"),(0,l.kt)("p",null,"In this example will concatenate 2 range() functions with the help of itertools module chain() function."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from itertools import chain \n\nprint("Merging two range into one") \nfrange =chain(range(10), range(10, 20, 1))\nfor i in frange: \n    print(i, end=" ")\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Merging two range into one\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n")),(0,l.kt)("h2",{id:"using-range-with-numpy"},"Using range() With NumPy"),(0,l.kt)("p",null,"The NumPy module has arange() function that works and gives similar output like range(). The arrange() takes in the same parameters like range()."),(0,l.kt)("p",null,"Syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"arange(start, stop, step)\n")),(0,l.kt)("p",null,"To work with NumPy follow the steps given below."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Step 1:")," Import NumPy module"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import numpy\n")),(0,l.kt)("p",null,"Incase while execution, it gives an error saying numpy module not found, you need to install the module as shown in step 2."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Step 2:")," Install NumPy"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"pip install numpy\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Step 3:")," Working Example of arange() using NumPy"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np \n\nfor  i in np.arange(10):\n   print(i, end =" ")        \n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"0 1 2 3 4 5 6 7 8 9\n")),(0,l.kt)("h2",{id:"floating-point-numbers-using-numpy-arange"},"Floating point numbers using NumPy arange()"),(0,l.kt)("p",null,"It is not possible to get the floating point sequence using range(), but it is possible using NumPy arange()."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("p",null,"The range that we want is from 0.5 to 1.5. The value will be increment by 0.2."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np \n\nfor  i in np.arange(0.5, 1.5, 0.2):\n   print(i, end =" ")        \n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"0.5 0.7 0.8999999999999999 1.0999999999999999 1.2999999999999998\n")),(0,l.kt)("p",null,"The output we get is a little weird,some of the float numbers are shown with 16 decimal places. This happens because of the complexity of storing decimal floating numbers into binary format. You can also round the values if required and limit them to the decimal places you need."),(0,l.kt)("h2",{id:"summary"},"Summary:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Python range() is a built-in function available with  Python from Python(3.x), and it gives a sequence of numbers based on the start and stop index given. In case the start index is not given, the index is considered as 0, and it will increment the value till the stop index."),(0,l.kt)("li",{parentName:"ul"},"Python range() has been introduced from python version 3, prior to that xrange() was the function."),(0,l.kt)("li",{parentName:"ul"},"The range() gives the sequence of numbers and returns a list of numbers. The xrange() function gives a generator object that needs to be looped in a for-loop to get the values."),(0,l.kt)("li",{parentName:"ul"},"The parameter step in range() can be used to increment /decrement the values. By default, it is a positive value 1. So it will always give incremented values."),(0,l.kt)("li",{parentName:"ul"},"Python gives an error for floating-point numbers as the range() function supports only integer values."),(0,l.kt)("li",{parentName:"ul"},"The values from range() can be accessed using for-loop, using index and list()"),(0,l.kt)("li",{parentName:"ul"},"The NumPy module has arange() function that works and gives similar output like range(). The arange() takes in the same parameters as range()."),(0,l.kt)("li",{parentName:"ul"},"It is possible to get the floating-point sequence NumPy arange() that is not supported using range().")))}h.isMDXComponent=!0}}]);