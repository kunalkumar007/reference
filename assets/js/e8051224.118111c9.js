"use strict";(self.webpackChunkreference=self.webpackChunkreference||[]).push([[1185],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function r(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var u=a.createContext({}),s=function(t){var e=a.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},p=function(t){var e=s(t.components);return a.createElement(u.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,l=t.originalType,u=t.parentName,p=r(t,["components","mdxType","originalType","parentName"]),c=s(n),h=i,d=c["".concat(u,".").concat(h)]||c[h]||m[h]||l;return n?a.createElement(d,o(o({ref:e},p),{},{components:n})):a.createElement(d,o({ref:e},p))}));function h(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var l=n.length,o=new Array(l);o[0]=c;var r={};for(var u in e)hasOwnProperty.call(e,u)&&(r[u]=e[u]);r.originalType=t,r.mdxType="string"==typeof t?t:i,o[1]=r;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8643:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return r},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return p},default:function(){return c}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),o=["components"],r={},u=void 0,s={unversionedId:"Python Course/Python map() function",id:"Python Course/Python map() function",isDocsHomePage:!1,title:"Python map() function",description:"026. Python map() function",source:"@site/docs/Python Course/026. Python map() function.md",sourceDirName:"Python Course",slug:"/Python Course/Python map() function",permalink:"/docs/Python Course/Python map() function",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/Python Course/026. Python map() function.md",tags:[],version:"current",sidebarPosition:26,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python range() Function",permalink:"/docs/Python Course/Python range() Function"},next:{title:"Python Timeit()",permalink:"/docs/Python Course/Python Timeit()"}},p=[{value:"Syntax:",id:"syntax",children:[]},{value:"Parameters",id:"parameters",children:[{value:"Here are two important",id:"here-are-two-important",children:[]},{value:"Return Value",id:"return-value",children:[]}]},{value:"How map() function works?",id:"how-map-function-works",children:[]},{value:"Using map() with Python built-in functions",id:"using-map-with-python-built-in-functions",children:[{value:"Example:",id:"example",children:[]}]},{value:"Using map() with a string as an iterator",id:"using-map-with-a-string-as-an-iterator",children:[]},{value:"Using map() with listof Numbers",id:"using-map-with-listof-numbers",children:[]},{value:"Using map() with Tuple",id:"using-map-with-tuple",children:[]},{value:"Using map() with Dictionary",id:"using-map-with-dictionary",children:[]},{value:"Using map() with Set",id:"using-map-with-set",children:[]},{value:"Using map() with Lambda function",id:"using-map-with-lambda-function",children:[]},{value:"Using Multiple Iterators inside map() function",id:"using-multiple-iterators-inside-map-function",children:[{value:"Example 1: Passing two list iterators to map()",id:"example-1-passing-two-list-iterators-to-map",children:[]},{value:"Example 2: Passing one Tuple and a list iterator to map()",id:"example-2-passing-one-tuple-and-a-list-iterator-to-map",children:[]}]},{value:"Summary",id:"summary",children:[]}],m={toc:p};function c(t){var e=t.components,n=(0,i.Z)(t,o);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("ol",{start:26},(0,l.kt)("li",{parentName:"ol"},"Python map() function")),(0,l.kt)("h1",{id:"python-map"},"Python map()"),(0,l.kt)("p",null,"Python map() applies a function on all the items of an iterator given as input. An iterator, for example, can be a list, a tuple, a set, a dictionary, a string, and it returns an iterable map object. Python map() is a built-in function."),(0,l.kt)("h2",{id:"syntax"},"Syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"map(function, iterator1,iterator2 ...iteratorN)\n")),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("h3",{id:"here-are-two-important"},"Here are two important"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"function: A mandatory function to be given to map, that will be applied to all the items available in the iterator."),(0,l.kt)("li",{parentName:"ul"},"iterator: An iterable compulsory object. It can be a list, a tuple, etc. You can pass multiple iterator objects to map() function.")),(0,l.kt)("h3",{id:"return-value"},"Return Value"),(0,l.kt)("p",null,"The map() function is going to apply the given function on all the items inside the iterator and return an iterable map object i.e a tuple, a list, etc."),(0,l.kt)("h2",{id:"how-map-function-works"},"How map() function works?"),(0,l.kt)("p",null,"The map() function takes two inputs as a function and an iterable object. The function that is given to map() is a normal function, and it will iterate over all the values present in the iterable object given."),(0,l.kt)("p",null,"For example, consider you have a list of numbers, and you want to find the square of each of the numbers."),(0,l.kt)("p",null,"The get the output, we need the function that will return the square of the given number. The function will be as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def square(n):\n    return n*n  \n")),(0,l.kt)("p",null,"The list of items that we want to find the square is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"my_list = [2,3,4,5,6,7,8,9]\n")),(0,l.kt)("p",null,"Now let us use map() python built-in function to get the square of each of the items in my_list."),(0,l.kt)("p",null,"The final code is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def square(n):\n    return n*n\nmy_list = [2,3,4,5,6,7,8,9]\nupdated_list = map(square, my_list)\nprint(updated_list)\nprint(list(updated_list))\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"<map object at 0x0000002C59601748>\n[4, 9, 16, 25, 36, 49, 64, 81]\n")),(0,l.kt)("p",null,"The output of the map() function, as seen in the output, is a map object displayed on the screen as <map object at 0x0000002C59601748>."),(0,l.kt)("p",null,"You will have to iterate the output from the map using a for-loop or using list() method to get the final output. I have used list() in the code that displays the values inside the list given."),(0,l.kt)("p",null,"So using map() function, we are able to get the square of each number.The list given to map was ","[2,3,4,5,6,7,8,9]"," and using the function square() the output from map() we got is ","[4, 9, 16, 25, 36, 49, 64, 81]"," ."),(0,l.kt)("p",null,"The function map() applies the function square() on all the items on the list. For example, my_list variable and updates the list with the square of each number. The out is stored in the updated_list variable."),(0,l.kt)("h2",{id:"using-map-with-python-built-in-functions"},"Using map() with Python built-in functions"),(0,l.kt)("p",null,"Python map() function is a built-in function and can also be used with other built-in functions available in Python. In the example, we are going to make use of Python round() built-in function that rounds the values given."),(0,l.kt)("h3",{id:"example"},"Example:"),(0,l.kt)("p",null,"The list that i have is my_list = ","[2.6743,3.63526,4.2325,5.9687967,6.3265,7.6988,8.232,9.6907]"," ."),(0,l.kt)("p",null,"I need the rounded values for each item present in the list. We will make use of round() as the function to map()."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"my_list = [2.6743,3.63526,4.2325,5.9687967,6.3265,7.6988,8.232,9.6907]\nupdated_list = map(round, my_list)\nprint(updated_list)\nprint(list(updated_list))\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"<map object at 0x000000E65F901748>\n[3, 4, 4, 6, 6, 8, 8, 10]\n")),(0,l.kt)("p",null,"The round() function is applied to all the items in the list, and it returns back a list with all values rounded as shown in the output."),(0,l.kt)("h2",{id:"using-map-with-a-string-as-an-iterator"},"Using map() with a string as an iterator"),(0,l.kt)("p",null,"We can also make use of map() on a string. In Python, a string acts like an array so we can easily use it inside the map()."),(0,l.kt)("p",null,"In the example, we have a function myMapFunc() that takes care of converting the given string to uppercase. The function myMapFunc () is given to map() function.The map function will take care of converting the string given to uppercase by passing the string to myMapFunc()."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def myMapFunc(s):\n    return s.upper()\nmy_str = "welcome to guru99 tutorials!"\nupdated_list = map(myMapFunc, my_str)\nprint(updated_list)\nfor i in updated_list:\n    print(i, end="")\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"<map object at 0x000000DF2E711748>\nWELCOME TO GURU99 TUTORIALS!\n")),(0,l.kt)("h2",{id:"using-map-with-listof-numbers"},"Using map() with listof Numbers"),(0,l.kt)("p",null,"To work with the list in map() will take a list of numbers and multiply each number in the list by 10."),(0,l.kt)("p",null,"The list that we are going to use is : ","[2,3,4,5,6,7,8,9]",". The function myMapFunc () takes care of multiply the given number with 10. The function is given to map along with the list."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pyhon"},"def myMapFunc(n):\n    return n*10\n\nmy_list = [2,3,4,5,6,7,8,9]\n\nupdated_list = map(myMapFunc, my_list)\nprint(updated_list)\nprint(list(updated_list))\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"<map object at 0x000000EE2C061898>\n[20, 30, 40, 50, 60, 70, 80, 90]\n")),(0,l.kt)("p",null,"The output we see is that each number in the list is"),(0,l.kt)("p",null,"multiplied by 10."),(0,l.kt)("h2",{id:"using-map-with-tuple"},"Using map() with Tuple"),(0,l.kt)("p",null,"A tuple is an object in Python that has items separated by commas and enclosed in round brackets. In the example, we will take a tuple with string values. The function that we will use will convert the values given to uppercase."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def myMapFunc(n):\n    return n.upper()\n\nmy_tuple = ('php','java','python','c++','c')\n\nupdated_list = map(myMapFunc, my_tuple)\nprint(updated_list)\nprint(list(updated_list))\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"<map object at 0x0000009C3C3A16A0>\n['PHP', 'JAVA', 'PYTHON', 'C++', 'C']\n")),(0,l.kt)("p",null,"The output we get is a tuple back with all the values in it are converted to uppercase."),(0,l.kt)("h2",{id:"using-map-with-dictionary"},"Using map() with Dictionary"),(0,l.kt)("p",null,"A dictionary in Python is created using curly brackets({}). Since the dictionary is an iterator, you can make use of it inside map() function. Let us now use a dictionary as an iterator inside map() function."),(0,l.kt)("p",null,"Following example shows the working of dictionary iterator inside map()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def myMapFunc(n):\n    return n*10\nmy_dict = {2,3,4,5,6,7,8,9}\nfinalitems = map(myMapFunc, my_dict)\nprint(finalitems)\nprint(list(finalitems))\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"<map object at 0x0000007EB451DEF0>\n[20, 30, 40, 50, 60, 70, 80, 90]\n")),(0,l.kt)("h2",{id:"using-map-with-set"},"Using map() with Set"),(0,l.kt)("p",null,"Set in Python is an unordered collection of items in curly brackets(()). Since set() is also an iterator, you can make use of it inside map() function."),(0,l.kt)("p",null,"Here is a working example of using set as an iterator inside map()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def myMapFunc(n):\n    return n*10\nmy_set = {2,3,4,5,6,7,8,9}\nfinalitems = map(myMapFunc, my_set)\nprint(finalitems)\nprint(list(finalitems))\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"<map object at 0x000000AC8F05DEF0>\n[20, 30, 40, 50, 60, 70, 80, 90]\n")),(0,l.kt)("h2",{id:"using-map-with-lambda-function"},"Using map() with Lambda function"),(0,l.kt)("p",null,"In Python, lambda expressions are utilized to construct anonymous functions. You will have to use the lambda keyword just as you use def to define normal functions."),(0,l.kt)("p",null,"So in the example, we are going to use the lambda function inside the map(). The lambda function will multiply each value in the list with 10."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"my_list = [2,3,4,5,6,7,8,9]\nupdated_list = map(lambda x: x * 10, my_list)\nprint(updated_list)\nprint(list(updated_list))\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"<map object at 0x000000BD18B11898>\n[20, 30, 40, 50, 60, 70, 80, 90]\n")),(0,l.kt)("h2",{id:"using-multiple-iterators-inside-map-function"},"Using Multiple Iterators inside map() function"),(0,l.kt)("h3",{id:"example-1-passing-two-list-iterators-to-map"},"Example 1: Passing two list iterators to map()"),(0,l.kt)("p",null,"You can send more than one iterator i.e. a list, a tuple, etc. all at the same time to the map() function."),(0,l.kt)("p",null,"For example, if you want to add two lists. The same can be done using the map() function. We are going to make use of two lists my_list1 and my_list2."),(0,l.kt)("p",null,"In the example below, the first item in the my_list1 is added to the first item of my_list2. The function myMapFunc() takes in items of my_list1 and my_list2 and returns the sum of both."),(0,l.kt)("p",null,"Here is the working example of adding two given lists using map() function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def myMapFunc(list1, list2):\n    return list1+list2\n\nmy_list1 = [2,3,4,5,6,7,8,9]\nmy_list2 = [4,8,12,16,20,24,28]\n\nupdated_list = map(myMapFunc, my_list1,my_list2)\nprint(updated_list)\nprint(list(updated_list))\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"<map object at 0x0000004D5F751860>\n[6, 11, 16, 21, 26, 31, 36]\n")),(0,l.kt)("h3",{id:"example-2-passing-one-tuple-and-a-list-iterator-to-map"},"Example 2: Passing one Tuple and a list iterator to map()"),(0,l.kt)("p",null,"We are going to make use of a list and a tuple iterator in map() function. The function is given to map \u2013 myMapFunc() will get the items from the list and Tuple. The items will be joined with an underscore(_). The working example is as shown below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def myMapFunc(list1, tuple1):\n    return list1+\"_\"+tuple1\n\nmy_list = ['a','b', 'b', 'd', 'e']\nmy_tuple = ('PHP','Java','Python','C++','C')\n\nupdated_list = map(myMapFunc, my_list,my_tuple)\nprint(updated_list)\nprint(list(updated_list))\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"<map object at 0x00000059F37BB4E0>\n['a_PHP', 'b_Java', 'b_Python', 'd_C++', 'e_C']\n")),(0,l.kt)("h2",{id:"summary"},"Summary"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Python map() is a built-in function that applies a function on all the items of an iterator given as input. An iterator, for example, can be a list, a tuple, a string, etc. and it returns an iterable map object."),(0,l.kt)("li",{parentName:"ul"},"The map() function is going to apply the given function on all the items inside the iterator and return an iterable map object i.e a tuple, a list, etc."),(0,l.kt)("li",{parentName:"ul"},"Python map() function is a built-in function and can also be used with other built-in functions available in Python."),(0,l.kt)("li",{parentName:"ul"},"A tuple is an object in Python that has items separated by commas and enclosed in round brackets. In the example will take a tuple with string values. The function that we will use will convert the values given to uppercase."),(0,l.kt)("li",{parentName:"ul"},"A dictionary in Python is created using curly brackets({}). Since the dictionary is an iterator, you can make use of it inside map() function."),(0,l.kt)("li",{parentName:"ul"},"Set in Python is an unordered collection of items in curly brackets(()). Since set() is also an iterator, you can make use of it inside map() function."),(0,l.kt)("li",{parentName:"ul"},"In Python, lambda expressions (or lambda forms) are utilized to construct anonymous functions. So the lambda keyword has to used when you want to use lambda inside the map()."),(0,l.kt)("li",{parentName:"ul"},"You can send more than one iterator i.e. a list, a tuple to the map() function.")))}c.isMDXComponent=!0}}]);