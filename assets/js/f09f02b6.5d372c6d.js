"use strict";(self.webpackChunkreference=self.webpackChunkreference||[]).push([[6377],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=i,g=m["".concat(p,".").concat(d)]||m[d]||c[d]||l;return n?a.createElement(g,r(r({ref:t},u),{},{components:n})):a.createElement(g,r({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},303:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=["components"],o={},p=void 0,s={unversionedId:"Python Course/SciPy in Python",id:"Python Course/SciPy in Python",isDocsHomePage:!1,title:"SciPy in Python",description:"047. SciPy in Python",source:"@site/docs/Python Course/047. SciPy in Python.md",sourceDirName:"Python Course",slug:"/Python Course/SciPy in Python",permalink:"/reference/docs/Python Course/SciPy in Python",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/Python Course/047. SciPy in Python.md",tags:[],version:"current",sidebarPosition:47,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python List index()",permalink:"/reference/docs/Python Course/Python List index()"},next:{title:"Pandas & CSV in Python",permalink:"/reference/docs/Python Course/Pandas & CSV in Python"}},u=[{value:"Sub-packages of SciPy:",id:"sub-packages-of-scipy",children:[]},{value:"Why use SciPy",id:"why-use-scipy",children:[]},{value:"Numpy VS SciPy",id:"numpy-vs-scipy",children:[{value:"Numpy:",id:"numpy",children:[]},{value:"SciPy:",id:"scipy",children:[]}]},{value:"SciPy - Installation and Environment Setup",id:"scipy---installation-and-environment-setup",children:[]},{value:"File Input / Output package:",id:"file-input--output-package",children:[{value:"Code Explanation",id:"code-explanation",children:[]}]},{value:"Special Function package",id:"special-function-package",children:[]},{value:"Cubic Root Function:",id:"cubic-root-function",children:[]},{value:"Exponential Function:",id:"exponential-function",children:[]},{value:"Permutations &amp; Combinations:",id:"permutations--combinations",children:[]},{value:"Permutations \u2013",id:"permutations-",children:[]},{value:"Log Sum Exponential Function",id:"log-sum-exponential-function",children:[{value:"Bessel Function",id:"bessel-function",children:[]}]},{value:"Linear Algebra with SciPy",id:"linear-algebra-with-scipy",children:[{value:"Inverse Matrix \u2013",id:"inverse-matrix-",children:[]},{value:"Eigenvalues and Eigenvector",id:"eigenvalues-and-eigenvector",children:[]},{value:"Example",id:"example",children:[]},{value:"Discrete Fourier Transform \u2013 scipy.fftpack",id:"discrete-fourier-transform--scipyfftpack",children:[]}]},{value:"Optimization and Fit in SciPy \u2013 scipy.optimize",id:"optimization-and-fit-in-scipy--scipyoptimize",children:[{value:"optimize.basinhopping(function, 0)",id:"optimizebasinhoppingfunction-0",children:[]}]},{value:"Nelder \u2013Mead Algorithm:",id:"nelder-mead-algorithm",children:[]},{value:"Image Processing with SciPy \u2013 scipy.ndimage",id:"image-processing-with-scipy--scipyndimage",children:[]},{value:"Integration with Scipy \u2013 Numerical Integration",id:"integration-with-scipy--numerical-integration",children:[]},{value:"Summary",id:"summary",children:[]}],c={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("ol",{start:47},(0,l.kt)("li",{parentName:"ol"},"SciPy in Python")),(0,l.kt)("h1",{id:"scipy-in-python"},"SciPy in Python"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"SciPy in Python"),' is an open-source library used for solving mathematical, scientific, engineering, and technical problems. It allows users to manipulate the data and visualize the data using a wide range of high-level Python commands. SciPy is built on the Python NumPy extention. SciPy is also pronounced as "Sigh Pi."'),(0,l.kt)("h2",{id:"sub-packages-of-scipy"},"Sub-packages of SciPy:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"File input/output - scipy.io"),(0,l.kt)("li",{parentName:"ul"},"Special Function - scipy.special"),(0,l.kt)("li",{parentName:"ul"},"Linear Algebra Operation - scipy.linalg"),(0,l.kt)("li",{parentName:"ul"},"Interpolation - scipy.interpolate"),(0,l.kt)("li",{parentName:"ul"},"Optimization and fit - scipy.optimize"),(0,l.kt)("li",{parentName:"ul"},"Statistics and random numbers - scipy.stats"),(0,l.kt)("li",{parentName:"ul"},"Numerical Integration - scipy.integrate"),(0,l.kt)("li",{parentName:"ul"},"Fast Fourier transforms - scipy.fftpack"),(0,l.kt)("li",{parentName:"ul"},"Signal Processing - scipy.signal"),(0,l.kt)("li",{parentName:"ul"},"Image manipulation \u2013 scipy.ndimage")),(0,l.kt)("h2",{id:"why-use-scipy"},"Why use SciPy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"SciPy contains varieties of sub packages which help to solve the most common issue related to Scientific Computation."),(0,l.kt)("li",{parentName:"ul"},"SciPy package in Python is the most used Scientific library only second to GNU Scientific Library for C/C++ or Matlab's."),(0,l.kt)("li",{parentName:"ul"},"Easy to use and understand as well as fast computational power."),(0,l.kt)("li",{parentName:"ul"},"It can operate on an array of NumPy library.")),(0,l.kt)("h2",{id:"numpy-vs-scipy"},"Numpy VS SciPy"),(0,l.kt)("h3",{id:"numpy"},"Numpy:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Numpy is written in C and use for mathematical or numeric calculation."),(0,l.kt)("li",{parentName:"ul"},"It is faster than other Python Libraries"),(0,l.kt)("li",{parentName:"ul"},"Numpy is the most useful library for Data Science to perform basic calculations."),(0,l.kt)("li",{parentName:"ul"},"Numpy contains nothing but array data type which performs the most basic operation like sorting, shaping, indexing, etc.")),(0,l.kt)("h3",{id:"scipy"},"SciPy:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"SciPy is built in top of the NumPy"),(0,l.kt)("li",{parentName:"ul"},"SciPy module in Python is a fully-featured version of Linear Algebra while Numpy contains only a few features."),(0,l.kt)("li",{parentName:"ul"},"Most new Data Science features are available in Scipy rather than Numpy.")),(0,l.kt)("h2",{id:"scipy---installation-and-environment-setup"},"SciPy - Installation and Environment Setup"),(0,l.kt)("p",null,"You can also install SciPy in Windows via pip"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Python3 -m pip install --user numpy scipy \n")),(0,l.kt)("p",null,"Install Scipy on Linux"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sudo apt-get install  python-scipy python-numpy\n")),(0,l.kt)("p",null,"Install SciPy in Mac"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sudo port install py35-scipy py35-numpy\n")),(0,l.kt)("p",null,"Before we start learning SciPy Python, you need to know basic functionality as well as different types of an array of ",(0,l.kt)("strong",{parentName:"p"},"NumPy")),(0,l.kt)("p",null,"The standard way to import SciPy modules and Numpy:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy import special   #same for other modules\nimport numpy as np\n")),(0,l.kt)("h2",{id:"file-input--output-package"},"File Input / Output package:"),(0,l.kt)("p",null,"Scipy, I/O package, has a wide range of functions for work with different files format which are Matlab, Arff, Wave, Matrix Market, IDL, NetCDF, TXT, CSV and binary format."),(0,l.kt)("p",null,"Let us take one file format Python SciPy example as which are regularly used in MatLab:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"}," import numpy as np\n from scipy import io as sio\n array = np.ones((4, 4))\n sio.savemat('example.mat', {'ar': array}) \n data = sio.loadmat(\u2018example.mat', struct_as_record=True)\n data['ar']\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"array([[ 1., 1., 1., 1.],\n           [ 1., 1., 1., 1.],\n           [ 1., 1., 1., 1.],\n           [ 1., 1., 1., 1.]])\n")),(0,l.kt)("h3",{id:"code-explanation"},"Code Explanation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Line 1 & 2: Import the essential SciPy library in Python with I/O package and Numpy."),(0,l.kt)("li",{parentName:"ul"},"Line 3: Create 4 x 4, dimensional one's array"),(0,l.kt)("li",{parentName:"ul"},"Line 4: Store array in example.mat file."),(0,l.kt)("li",{parentName:"ul"},"Line 5: Get data from example.mat file"),(0,l.kt)("li",{parentName:"ul"},"Line 6: Print output.")),(0,l.kt)("h2",{id:"special-function-package"},"Special Function package"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"scipy.special package contains numerous functions of mathematical physics."),(0,l.kt)("li",{parentName:"ul"},"SciPy special function includes Cubic Root, Exponential, Log sum Exponential, Lambert, Permutation and Combinations, Gamma, Bessel, hypergeometric, Kelvin, beta, parabolic cylinder, Relative Error Exponential, etc.."),(0,l.kt)("li",{parentName:"ul"},"For one line description all of these function, type in Python console:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"help(scipy.special) \nOutput : \nNAME\n    scipy.special\n\nDESCRIPTION\n    ========================================\n    Special functions (:mod:`scipy.special`)\n    ========================================\n     \n    .. module:: scipy.special\n     \n    Nearly all of the functions below are universal functions and follow\n    broadcasting and automatic array-looping rules. Exceptions are noted.\n")),(0,l.kt)("h2",{id:"cubic-root-function"},"Cubic Root Function:"),(0,l.kt)("p",null,"Cubic Root function finds the cube root of values."),(0,l.kt)("p",null,"Syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"scipy.special.cbrt(x)\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy.special import cbrt\n#Find cubic root of 27 & 64 using cbrt() function\ncb = cbrt([27, 64])\n#print value of cb\nprint(cb)\n")),(0,l.kt)("p",null,"Output: array(","[3., 4.]",")"),(0,l.kt)("h2",{id:"exponential-function"},"Exponential Function:"),(0,l.kt)("p",null,"Exponential function computes the 10**x element-wise."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy.special import exp10\n#define exp10 function and pass value in its\nexp = exp10([1,10])\nprint(exp)\n")),(0,l.kt)("p",null,"Output: ","[1.e+01 1.e+10]"),(0,l.kt)("h2",{id:"permutations--combinations"},"Permutations & Combinations:"),(0,l.kt)("p",null,"SciPy also gives functionality to calculate Permutations and Combinations."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Combinations")," - scipy.special.comb(N,k)"),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy.special import comb\n#find combinations of 5, 2 values using comb(N, k)\ncom = comb(5, 2, exact = False, repetition=True)\nprint(com)\n")),(0,l.kt)("p",null,"Output: 15.0"),(0,l.kt)("h2",{id:"permutations-"},"Permutations \u2013"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"scipy.special.perm(N,k)\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy.special import perm\n#find permutation of 5, 2 using perm (N, k) function\nper = perm(5, 2, exact = True)\nprint(per)\n")),(0,l.kt)("p",null,"Output: 20"),(0,l.kt)("h2",{id:"log-sum-exponential-function"},"Log Sum Exponential Function"),(0,l.kt)("p",null,"Log Sum Exponential computes the log of sum exponential input element."),(0,l.kt)("p",null,"Syntax :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"scipy.special.logsumexp(x) \n")),(0,l.kt)("h3",{id:"bessel-function"},"Bessel Function"),(0,l.kt)("p",null,"Nth integer order calculation function"),(0,l.kt)("p",null,"Syntax :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"scipy.special.jn()\n")),(0,l.kt)("h2",{id:"linear-algebra-with-scipy"},"Linear Algebra with SciPy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Linear Algebra of SciPy is an implementation of BLAS and ATLAS LAPACK libraries."),(0,l.kt)("li",{parentName:"ul"},"Performance of Linear Algebra is very fast compared to BLAS and LAPACK."),(0,l.kt)("li",{parentName:"ul"},"Linear algebra routine accepts two-dimensional array object and output is also a two-dimensional array.\nNow let's do some test with ",(0,l.kt)("strong",{parentName:"li"},"scipy.linalg,"))),(0,l.kt)("p",null,"Calculating ",(0,l.kt)("strong",{parentName:"p"},"determinant")," of a two-dimensional matrix,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy import linalg\nimport numpy as np\n#define square matrix\ntwo_d_array = np.array([ [4,5], [3,2] ])\n#pass values to det() function\nlinalg.det( two_d_array )\n")),(0,l.kt)("p",null,"Output: -7.0"),(0,l.kt)("h3",{id:"inverse-matrix-"},"Inverse Matrix \u2013"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"scipy.linalg.inv()\n")),(0,l.kt)("p",null,"Inverse Matrix of Scipy calculates the inverse of any square matrix."),(0,l.kt)("p",null,"Let's see,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy import linalg\nimport numpy as np\n# define square matrix\ntwo_d_array = np.array([ [4,5], [3,2] ])\n#pass value to function inv()\nlinalg.inv( two_d_array )\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"array( [[-0.28571429,  0.71428571],\n       [ 0.42857143, -0.57142857]] )\n")),(0,l.kt)("h3",{id:"eigenvalues-and-eigenvector"},"Eigenvalues and Eigenvector"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"scipy.linalg.eig()\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The most common problem in linear algebra is eigenvalues and eigenvector which can be easily solved using eig() function."),(0,l.kt)("li",{parentName:"ul"},"Now lets we find the Eigenvalue of (X) and correspond eigenvector of a two-dimensional square matrix.")),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy import linalg\nimport numpy as np\n#define two dimensional array\narr = np.array([[5,4],[6,3]])\n#pass value into function\neg_val, eg_vect = linalg.eig(arr)\n#get eigenvalues\nprint(eg_val)\n#get eigenvectors\nprint(eg_vect)\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"[ 9.+0.j -1.+0.j] #eigenvalues\n [ [ 0.70710678 -0.5547002 ] #eigenvectors\n   [ 0.70710678  0.83205029] ]\n")),(0,l.kt)("h3",{id:"discrete-fourier-transform--scipyfftpack"},"Discrete Fourier Transform \u2013 scipy.fftpack"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"DFT is a mathematical technique which is used in converting spatial data into frequency data."),(0,l.kt)("li",{parentName:"ul"},"FFT (Fast Fourier Transformation) is an algorithm for computing DFT"),(0,l.kt)("li",{parentName:"ul"},"FFT is applied to a multidimensional array."),(0,l.kt)("li",{parentName:"ul"},"Frequency defines the number of signal or wavelength in particular time period.\n",(0,l.kt)("strong",{parentName:"li"},"Example:")," Take a wave and show using Matplotlib library. we take simple periodic function example of sin(20 \xd7 2\u03c0t)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"%matplotlib inline\nfrom matplotlib import pyplot as plt\nimport numpy as np \n\n#Frequency in terms of Hertz\nfre  = 5 \n#Sample rate\nfre_samp = 50\nt = np.linspace(0, 2, 2 * fre_samp, endpoint = False )\na = np.sin(fre  * 2 * np.pi * t)\nfigure, axis = plt.subplots()\naxis.plot(t, a)\naxis.set_xlabel ('Time (s)')\naxis.set_ylabel ('Signal amplitude')\nplt.show()\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.guru99.com/images/1/120518_0746_PythonSciPy1.png",alt:"image"})),(0,l.kt)("p",null,"You can see this. Frequency is 5 Hz and its signal repeats in 1/5 seconds \u2013 it's call as a particular time period."),(0,l.kt)("p",null,"Now let us use this sinusoid wave with the help of DFT application."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy import fftpack\n\nA = fftpack.fft(a)\nfrequency = fftpack.fftfreq(len(a)) * fre_samp\nfigure, axis = plt.subplots()\n\naxis.stem(frequency, np.abs(A))\naxis.set_xlabel('Frequency in Hz')\naxis.set_ylabel('Frequency Spectrum Magnitude')\naxis.set_xlim(-fre_samp / 2, fre_samp/ 2)\naxis.set_ylim(-5, 110)\nplt.show()\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.guru99.com/images/1/120518_0746_PythonSciPy2.png",alt:"image"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"You can clearly see that output is a one-dimensional array."),(0,l.kt)("li",{parentName:"ul"},"Input containing complex values are zero except two points."),(0,l.kt)("li",{parentName:"ul"},"In DFT example we visualize the magnitude of the signal.")),(0,l.kt)("h2",{id:"optimization-and-fit-in-scipy--scipyoptimize"},"Optimization and Fit in SciPy \u2013 scipy.optimize"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Optimization provides a useful algorithm for minimization of curve fitting, multidimensional or scalar and root fitting."),(0,l.kt)("li",{parentName:"ul"},"Let's take an example of a Scalar Function, to find minimum scalar function.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom scipy import optimize\nimport numpy as np\n\ndef function(a):\n       return   a*2 + 20 * np.sin(a)\nplt.plot(a, function(a))\nplt.show()\n#use BFGS algorithm for optimization\noptimize.fmin_bfgs(function, 0) \n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.guru99.com/images/1/120518_0746_PythonSciPy3.png",alt:"image"})),(0,l.kt)("p",null,"Optimization terminated successfully."),(0,l.kt)("p",null,"Current function value: -23.241676"),(0,l.kt)("p",null,"Iterations: 4"),(0,l.kt)("p",null,"Function evaluations: 18"),(0,l.kt)("p",null,"Gradient evaluations: 6"),(0,l.kt)("p",null,"array(","[-1.67096375]",")"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In this example, optimization is done with the help of the gradient descent algorithm from the initial point"),(0,l.kt)("li",{parentName:"ul"},"But the possible issue is local minima instead of global minima. If we don't find a neighbor of global minima, then we need to apply global optimization and find global minima function used as ",(0,l.kt)("strong",{parentName:"li"},"basinhopping()")," which combines local optimizer.")),(0,l.kt)("h3",{id:"optimizebasinhoppingfunction-0"},"optimize.basinhopping(function, 0)"),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"fun: -23.241676238045315\n lowest_optimization_result:\n      fun: -23.241676238045315\n hess_inv: array([[0.05023331]])\n      jac: array([4.76837158e-07])\n  message: 'Optimization terminated successfully.'\n     nfev: 15\n      nit: 3\n     njev: 5\n   status: 0\n  success: True\n        x: array([-1.67096375])\n                    message: ['requested number of basinhopping iterations completed successfully']\n      minimization_failures: 0\n                       nfev: 1530\n                        nit: 100\n                       njev: 510\n               x: array([-1.67096375])\n")),(0,l.kt)("h2",{id:"nelder-mead-algorithm"},"Nelder \u2013Mead Algorithm:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Nelder-Mead algorithm selects through method parameter."),(0,l.kt)("li",{parentName:"ul"},"It provides the most straightforward way of minimization for fair behaved function."),(0,l.kt)("li",{parentName:"ul"},"Nelder \u2013 Mead algorithm is not used for gradient evaluations because it may take a longer time to find the solution.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\nfrom scipy.optimize import minimize\n#define function f(x)\ndef f(x):   \n    return .4*(1 - x[0])**2\n  \noptimize.minimize(f, [2, -1], method="Nelder-Mead")\n')),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"final_simplex: (array([[ 1.        , -1.27109375],\n       [ 1.        , -1.27118835],\n       [ 1.        , -1.27113762]]), array([0., 0., 0.]))\n           fun: 0.0\n       message: 'Optimization terminated successfully.'\n          nfev: 147\n           nit: 69\n        status: 0\n       success: True\n             x: array([ 1.        , -1.27109375])\n")),(0,l.kt)("h2",{id:"image-processing-with-scipy--scipyndimage"},"Image Processing with SciPy \u2013 scipy.ndimage"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"scipy.ndimage is a submodule of SciPy which is mostly used for performing an image related operation"),(0,l.kt)("li",{parentName:"ul"},'ndimage means the "n" dimensional image.'),(0,l.kt)("li",{parentName:"ul"},"SciPy Image Processing provides Geometrics transformation (rotate, crop, flip), image filtering (sharp and de nosing), display image, image segmentation, classification and features extraction."),(0,l.kt)("li",{parentName:"ul"},"MISC Package in SciPy contains prebuilt images which can be used to perform image manipulation task")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example:")," Let's take a geometric transformation example of images"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy import misc\nfrom matplotlib import pyplot as plt\nimport numpy as np\n#get face image of panda from misc package\npanda = misc.face()\n#plot or show image of face\nplt.imshow( panda )\nplt.show()\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.guru99.com/images/1/120518_0746_PythonSciPy4.png",alt:"image"})),(0,l.kt)("p",null,"Now we Flip-down current image:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#Flip Down using scipy misc.face image  \nflip_down = np.flipud(misc.face())\nplt.imshow(flip_down)\nplt.show()\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.guru99.com/images/1/120518_0746_PythonSciPy5.png",alt:"image"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example:")," Rotation of Image using Scipy,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy import ndimage, misc\nfrom matplotlib import pyplot as plt\npanda = misc.face()\n#rotatation function of scipy for image \u2013 image rotated 135 degree\npanda_rotate = ndimage.rotate(panda, 135)\nplt.imshow(panda_rotate)\nplt.show()\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.guru99.com/images/1/120518_0746_PythonSciPy6.png",alt:"image"})),(0,l.kt)("h2",{id:"integration-with-scipy--numerical-integration"},"Integration with Scipy \u2013 Numerical Integration"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"When we integrate any function where analytically integrate is not possible, we need to turn for numerical integration"),(0,l.kt)("li",{parentName:"ul"},"SciPy provides functionality to integrate function with numerical integration."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"scipy.integrate")," library has single integration, double, triple, multiple, Gaussian quadrate, Romberg, Trapezoidal and Simpson's rules.\n",(0,l.kt)("strong",{parentName:"li"},"Example:")," Now take an example of ",(0,l.kt)("strong",{parentName:"li"},"Single Integration"))),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.guru99.com/images/1/120518_0746_PythonSciPy7.jpg",alt:"image"})),(0,l.kt)("p",null,"Here ",(0,l.kt)("strong",{parentName:"p"},"a")," is the upper limit and ",(0,l.kt)("strong",{parentName:"p"},"b")," is the lower limit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy import integrate\n# take f(x) function as f\nf = lambda x : x**2\n#single integration with a = 0 & b = 1  \nintegration = integrate.quad(f, 0 , 1)\nprint(integration)\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"(0.33333333333333337, 3.700743415417189e-15)\n")),(0,l.kt)("p",null,"Here function returns two values, in which the first value is integration and second value is estimated error in integral."),(0,l.kt)("p",null,"Example: Now take an SciPy example of ",(0,l.kt)("strong",{parentName:"p"},"double integration.")," We find the double integration of the following equation,"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.guru99.com/images/1/120518_0746_PythonSciPy8.jpg",alt:"image"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from scipy import integrate\nimport numpy as np\n#import square root function from math lib\nfrom math import sqrt\n# set  fuction f(x)\nf = lambda x, y : 64 *x*y\n# lower limit of second integral\np = lambda x : 0\n# upper limit of first integral\nq = lambda y : sqrt(1 - 2*y**2)\n# perform double integration\nintegration = integrate.dblquad(f , 0 , 2/4,  p, q)\nprint(integration)\n")),(0,l.kt)("p",null,"Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"(3.0, 9.657432734515774e-14)\n")),(0,l.kt)("p",null,"You have seen that above output as same previous one."),(0,l.kt)("h2",{id:"summary"},"Summary"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'SciPy(pronounced as "Sigh Pi") is an Open Source Python-based library, which is used in mathematics, scientific computing, Engineering, and technical computing.'),(0,l.kt)("li",{parentName:"ul"},"SciPy contains varieties of sub packages which help to solve the most common issue related to Scientific Computation."),(0,l.kt)("li",{parentName:"ul"},"SciPy is built in top of the NumPy")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Package Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"scipy.io"),(0,l.kt)("td",{parentName:"tr",align:null},"File input/output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"scipy.special"),(0,l.kt)("td",{parentName:"tr",align:null},"Special Function")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"scipy.linalg"),(0,l.kt)("td",{parentName:"tr",align:null},"Linear Algebra Operation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"scipy.interpolate"),(0,l.kt)("td",{parentName:"tr",align:null},"Interpolation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"scipy.optimize"),(0,l.kt)("td",{parentName:"tr",align:null},"Optimization and fit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"scipy.stats"),(0,l.kt)("td",{parentName:"tr",align:null},"Statistics and random numbers")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"scipy.integrate"),(0,l.kt)("td",{parentName:"tr",align:null},"Numerical Integration")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"scipy.fftpack"),(0,l.kt)("td",{parentName:"tr",align:null},"Fast Fourier transforms")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"scipy.signal"),(0,l.kt)("td",{parentName:"tr",align:null},"Signal Processing")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"scipy.ndimage"),(0,l.kt)("td",{parentName:"tr",align:null},"Image manipulation \u2013")))))}m.isMDXComponent=!0}}]);