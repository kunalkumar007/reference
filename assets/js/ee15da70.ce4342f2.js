"use strict";(self.webpackChunkreference=self.webpackChunkreference||[]).push([[3377],{3905:function(e,t,i){i.d(t,{Zo:function(){return s},kt:function(){return h}});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function m(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var o=n.createContext({}),u=function(e){var t=n.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},s=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),c=u(i),h=a,d=c["".concat(o,".").concat(h)]||c[h]||p[h]||r;return i?n.createElement(d,l(l({ref:t},s),{},{components:i})):n.createElement(d,l({ref:t},s))}));function h(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=c;var m={};for(var o in t)hasOwnProperty.call(t,o)&&(m[o]=t[o]);m.originalType=e,m.mdxType="string"==typeof e?e:a,l[1]=m;for(var u=2;u<r;u++)l[u]=i[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}c.displayName="MDXCreateElement"},6044:function(e,t,i){i.r(t),i.d(t,{frontMatter:function(){return m},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return s},default:function(){return c}});var n=i(7462),a=i(3366),r=(i(7294),i(3905)),l=["components"],m={},o=void 0,u={unversionedId:"Python Course/Python Timeit()",id:"Python Course/Python Timeit()",isDocsHomePage:!1,title:"Python Timeit()",description:"027. Python Timeit()",source:"@site/docs/Python Course/027. Python Timeit().md",sourceDirName:"Python Course",slug:"/Python Course/Python Timeit()",permalink:"/docs/Python Course/Python Timeit()",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/Python Course/027. Python Timeit().md",tags:[],version:"current",sidebarPosition:27,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python map() function",permalink:"/docs/Python Course/Python map() function"},next:{title:"Python yield",permalink:"/docs/Python Course/Python yield"}},s=[{value:"Syntax:",id:"syntax",children:[]},{value:"Parameters",id:"parameters",children:[]},{value:"First Example",id:"first-example",children:[]},{value:"Timing Multiple lines in python code",id:"timing-multiple-lines-in-python-code",children:[]},{value:"Example 1: Using semicolon",id:"example-1-using-semicolon",children:[]},{value:"Example 2: Using triple quotes",id:"example-2-using-triple-quotes",children:[]},{value:"timeit - Methods:",id:"timeit---methods",children:[{value:"Program Example 1:",id:"program-example-1",children:[]},{value:"Example 2:",id:"example-2",children:[]}]},{value:"Example 3: timeit.repeat()",id:"example-3-timeitrepeat",children:[]},{value:"Executing timing function timeit.timeit() inside command-line interface",id:"executing-timing-function-timeittimeit-inside-command-line-interface",children:[{value:"Example:",id:"example",children:[]},{value:"Example :",id:"example-",children:[]}]},{value:"Why is timeit() the best way to measure the execution time of Python code?",id:"why-is-timeit-the-best-way-to-measure-the-execution-time-of-python-code",children:[]},{value:"Summary",id:"summary",children:[]}],p={toc:s};function c(e){var t=e.components,i=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ol",{start:27},(0,r.kt)("li",{parentName:"ol"},"Python Timeit()")),(0,r.kt)("h1",{id:"what-is-python-timeit"},"What is Python Timeit()?"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Python timeit()")," is a method in Python library to measure the execution time taken by the given code snippet. The Python library runs the code statement 1 million times and provides the minimum time taken from the given set of code snippets. Python timeit() is a useful method that helps in checking the performance of the code."),(0,r.kt)("h2",{id:"syntax"},"Syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"timeit.timeit(stmt, setup,timer, number)\n")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"stmt:"),' This will take the code for which you want to measure the execution time. The default value is "pass".'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"setup:"),' This will have setup details that need to be executed before stmt. The default value is "pass."'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"timer:")," This will have the timer value, timeit() already has a default value set, and we can ignore it."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"number:")," The stmt will execute as per the number is given here. The default value is 1000000.")),(0,r.kt)("p",null,"To work with timeit(), we need to import the module, as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import timeit\n")),(0,r.kt)("h2",{id:"first-example"},"First Example"),(0,r.kt)("p",null,"Here is a simple example of timeit() function"),(0,r.kt)("p",null,"Code Example 1:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# testing timeit()\nimport timeit\nprint(timeit.timeit('output = 10*5'))\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"0.06127880399999999\n")),(0,r.kt)("p",null,"We have seen a simple example that gives us the execution time of the simple code statement output = 10*5, and the time is taken to execute it is 0.06127880399999999."),(0,r.kt)("h2",{id:"timing-multiple-lines-in-python-code"},"Timing Multiple lines in python code"),(0,r.kt)("p",null,"There are two you can execute multiple lines of code in timeit.timeit(), using a semicolon or by saving the code enclosed as a string with triple quotes."),(0,r.kt)("p",null,"Here are examples that show the working of it."),(0,r.kt)("h2",{id:"example-1-using-semicolon"},"Example 1: Using semicolon"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import timeit\nprint(\"The time taken is \",timeit.timeit(stmt='a=10;b=10;sum=a+b'))\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"The time taken is  0.137031482\n")),(0,r.kt)("h2",{id:"example-2-using-triple-quotes"},"Example 2: Using triple quotes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import timeit\nimport_module = \"import random\"\ntestcode = ''' \ndef test(): \n    return random.randint(10, 100)\n'''\nprint(timeit.repeat(stmt=testcode, setup=import_module))\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"C:\\pythontest>python testtimeit.py\nThe time taken is  0.182619178\n")),(0,r.kt)("h2",{id:"timeit---methods"},"timeit - Methods:"),(0,r.kt)("p",null,"Here, are 2 important timeit methods"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"timeit.default_timer()")," : This will return the default time when executed."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"timeit.repeat(stmt, setup, timer, repeat, number)")," : same as timeit() , but with repeat the timeit() is called the number of times repeat is given."),(0,r.kt)("h3",{id:"program-example-1"},"Program Example 1:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# testing timeit()\nimport timeit\nimport_module = \"import random\"\ntestcode = ''' \ndef test(): \n    return random.randint(10, 100)\n'''\nprint(timeit.timeit(stmt=testcode, setup=import_module))\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"0.46715912400000004\n")),(0,r.kt)("h3",{id:"example-2"},"Example 2:"),(0,r.kt)("p",null,"default_timer() Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# testing timeit()\n \nimport timeit\nimport random\n \ndef test(): \n    return random.randint(10, 100)\n \nstarttime = timeit.default_timer()\nprint("The start time is :",starttime)\ntest()\nprint("The time difference is :", timeit.default_timer() - starttime)\n')),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"The start time is : 0.220261875\nThe time difference is : 0.0004737320000000045\n")),(0,r.kt)("h2",{id:"example-3-timeitrepeat"},"Example 3: timeit.repeat()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# testing timeit()\nimport timeit\nimport_module = \"import random\"\ntestcode = ''' \ndef test(): \n    return random.randint(10, 100)\n'''\nprint(timeit.repeat(stmt=testcode, setup=import_module, repeat=5))\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"}," [0.43638873, 0.5040939680000001, 0.5069179909999999, 0.3943449330000002, 0.3546886979999999]\n")),(0,r.kt)("p",null,"timeit.repeat() works similar to timeit.timeit() function, with the only difference it takes in the repeat argument and gives back the execution time in array format with values as per the repeat number."),(0,r.kt)("h2",{id:"executing-timing-function-timeittimeit-inside-command-line-interface"},"Executing timing function timeit.timeit() inside command-line interface"),(0,r.kt)("p",null,"The syntax to execute your function inside timeit() on the command line is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"python -m timeit [-n N] [-r N] [-s S] [-t] [-c] [-h] [code statement ...]\n")),(0,r.kt)("p",null,"Command line parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"-n N: the number of times you want the code to execute."),(0,r.kt)("li",{parentName:"ul"},"-r N: the number of times you want the timeit() function to repeat"),(0,r.kt)("li",{parentName:"ul"},"-s S: this will have setup details that will get executed before code execution."),(0,r.kt)("li",{parentName:"ul"},"-t: for this, you can make use of time.time()"),(0,r.kt)("li",{parentName:"ul"},"-c: for this, you can make use of time.clock()"),(0,r.kt)("li",{parentName:"ul"},"-h: for help"),(0,r.kt)("li",{parentName:"ul"},"code statement: The code details.")),(0,r.kt)("h3",{id:"example"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"C:\\pythontest>python -m timeit -s 'text=\"hello world\"'\n20000000 loops, best of 5: 13.1 nsec per loop\n")),(0,r.kt)("p",null,"Another way you can execute inside command line is as shown below:"),(0,r.kt)("h3",{id:"example-"},"Example :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> import timeit\n>>> print(\"The time taken is \",timeit.timeit(stmt='a=10;b=10;sum=a+b'))\nThe time taken is  0.15048536300000137\n>>>\n")),(0,r.kt)("h2",{id:"why-is-timeit-the-best-way-to-measure-the-execution-time-of-python-code"},"Why is timeit() the best way to measure the execution time of Python code?"),(0,r.kt)("p",null,"Here are a few reasons why we consider timeit() is the best way to measure execution time."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It runs the code statement 1 million times that is the default value, and from that, it will return you the minimum time taken. You can also increase/decrease the 1 million by setting the argument number in time () function."),(0,r.kt)("li",{parentName:"ul"},"While executing the test, the garbage collection is disabled every time by time () function."),(0,r.kt)("li",{parentName:"ul"},"timeit() internally takes the accurate time as per your operating system being used. For example, it will use time.clock() for Windows operating system and time.time() for mac and Linux.")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Timeit()is used to get the execution time taken for the small code given"),(0,r.kt)("p",null,"Parameters used with timeit()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"stmt: This will take the code you want to measure the execution time"),(0,r.kt)("li",{parentName:"ul"},"setup: This will have setup details that need to be executed before stmt"),(0,r.kt)("li",{parentName:"ul"},"timer: This will have the timer value, timeit() already has a default value set, and we can ignore it."),(0,r.kt)("li",{parentName:"ul"},"number: The stmt will execute as per the number is given here.")))}c.isMDXComponent=!0}}]);